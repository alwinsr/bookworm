// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  publisher     String?
  publishedAt   DateTime
  coverImageUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  authorId Int
  author   Author @relation(fields: [authorId], references: [id])

  // Many-to-many relation
  genres BookGenre[]
}

model Genre {
  id    Int         @id @default(autoincrement())
  genre String      @unique
  books BookGenre[]
}

model BookGenre {
  id      Int @id @default(autoincrement()) // add autoincrement
  bookId  Int
  genreId Int

  book  Book  @relation(fields: [bookId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@unique([bookId, genreId]) // prevent duplicates
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // reviews Review[]
}

// model Review {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   bookId    Int
//   rating    Decimal
//   reviewText   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user      User     @relation(fields: [userId], references: [id])
//   book      Book     @relation(fields: [bookId], references: [id])
// }
